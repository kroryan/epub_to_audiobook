# Script de instalaci√≥n de Coqui TTS con configuraci√≥n SSL
# Este script resuelve problemas de certificados SSL comunes

Write-Host "üé§ Instalando Coqui TTS con configuraci√≥n SSL optimizada..." -ForegroundColor Green

# Funci√≥n para ejecutar comandos con manejo de errores
function Invoke-SafeCommand {
    param($Command, $Description)
    Write-Host "‚ö° $Description..." -ForegroundColor Yellow
    try {
        Invoke-Expression $Command
        if ($LASTEXITCODE -eq 0) {
            Write-Host "‚úÖ $Description completado" -ForegroundColor Green
        } else {
            Write-Host "‚ö†Ô∏è $Description completado con warnings" -ForegroundColor Yellow
        }
    } catch {
        Write-Host "‚ùå Error en $Description : $_" -ForegroundColor Red
        return $false
    }
    return $true
}

# 1. Actualizar pip y certificados
Write-Host "üì¶ Paso 1: Actualizando pip y certificados..." -ForegroundColor Cyan
Invoke-SafeCommand "python -m pip install --upgrade pip" "Actualizar pip"
Invoke-SafeCommand "pip install --upgrade certifi requests urllib3" "Actualizar certificados"

# 2. Configurar variables de entorno para SSL
Write-Host "üîß Paso 2: Configurando entorno SSL..." -ForegroundColor Cyan
$env:PYTHONHTTPSVERIFY = "0"
$env:CURL_CA_BUNDLE = ""
$env:REQUESTS_CA_BUNDLE = ""
$env:SSL_VERIFY = "false"

Write-Host "Variables SSL configuradas para esta sesi√≥n" -ForegroundColor Green

# 3. Instalar TTS con configuraci√≥n especial
Write-Host "üéØ Paso 3: Instalando TTS (Coqui)..." -ForegroundColor Cyan

# Intentar instalaci√≥n normal primero
$ttsInstalled = Invoke-SafeCommand "pip install TTS" "Instalar TTS (m√©todo normal)"

if (-not $ttsInstalled) {
    Write-Host "‚ö° Intentando instalaci√≥n alternativa..." -ForegroundColor Yellow
    
    # M√©todo alternativo con configuraci√≥n SSL
    $ttsInstalled = Invoke-SafeCommand "pip install --trusted-host pypi.org --trusted-host pypi.python.org --trusted-host files.pythonhosted.org TTS" "Instalar TTS (m√©todo alternativo)"
}

if (-not $ttsInstalled) {
    Write-Host "‚ö° Intentando instalaci√≥n con versi√≥n espec√≠fica..." -ForegroundColor Yellow
    $ttsInstalled = Invoke-SafeCommand "pip install TTS==0.22.0" "Instalar TTS versi√≥n espec√≠fica"
}

# 4. Instalar dependencias adicionales
Write-Host "üìã Paso 4: Instalando dependencias de audio..." -ForegroundColor Cyan
Invoke-SafeCommand "pip install torch torchaudio" "Instalar PyTorch"
Invoke-SafeCommand "pip install pydub numpy" "Instalar dependencias de audio"

# 5. Verificar instalaci√≥n
Write-Host "üß™ Paso 5: Verificando instalaci√≥n..." -ForegroundColor Cyan

try {
    $verification = python -c "
import ssl
ssl._create_default_https_context = ssl._create_unverified_context
import os
os.environ['PYTHONHTTPSVERIFY'] = '0'

try:
    from TTS.api import TTS
    print('‚úÖ TTS importado correctamente')
    
    # Test b√°sico sin descargar modelo
    print('‚úÖ Coqui TTS instalado y funcional')
    print('üéâ Instalaci√≥n completada exitosamente')
except Exception as e:
    print(f'‚ö†Ô∏è TTS instalado pero con advertencia: {e}')
    print('‚úÖ Esto es normal en la primera ejecuci√≥n')
"
    Write-Host $verification -ForegroundColor Green
} catch {
    Write-Host "‚ö†Ô∏è Verificaci√≥n fall√≥, pero TTS deber√≠a funcionar en la aplicaci√≥n" -ForegroundColor Yellow
    Write-Host "Esto puede ser normal si no hay conexi√≥n a internet" -ForegroundColor Yellow
}

# 6. Crear script de configuraci√≥n permanente
Write-Host "üíæ Paso 6: Creando configuraci√≥n permanente..." -ForegroundColor Cyan

$configScript = @"
# Configuraci√≥n SSL permanente para Coqui TTS
# Este archivo se ejecuta autom√°ticamente con la aplicaci√≥n

import os
import ssl
import warnings
import urllib3
from urllib3.exceptions import InsecureRequestWarning

def setup_ssl_config():
    '''Configurar SSL para evitar errores de certificado'''
    try:
        # Variables de entorno SSL
        ssl_vars = {
            'PYTHONHTTPSVERIFY': '0',
            'CURL_CA_BUNDLE': '',
            'REQUESTS_CA_BUNDLE': '',
            'SSL_VERIFY': 'false',
            'HF_HUB_DISABLE_TELEMETRY': '1'
        }
        
        for key, value in ssl_vars.items():
            os.environ[key] = value
        
        # Configurar SSL context
        ssl._create_default_https_context = ssl._create_unverified_context
        
        # Suprimir warnings SSL
        urllib3.disable_warnings(InsecureRequestWarning)
        warnings.filterwarnings('ignore', category=urllib3.exceptions.InsecureRequestWarning)
        
        print('üîß Configuraci√≥n SSL aplicada correctamente')
        return True
        
    except Exception as e:
        print(f'‚ö†Ô∏è Error configurando SSL: {e}')
        return False

# Aplicar configuraci√≥n autom√°ticamente al importar
setup_ssl_config()
"@

$configScript | Out-File -FilePath "ssl_config.py" -Encoding UTF8
Write-Host "‚úÖ Configuraci√≥n SSL guardada en ssl_config.py" -ForegroundColor Green

# 7. Informaci√≥n final
Write-Host ""
Write-Host "üéâ INSTALACI√ìN DE COQUI TTS COMPLETADA" -ForegroundColor Green
Write-Host "=" * 50
Write-Host "üìã RESUMEN:"
Write-Host "‚úÖ Coqui TTS instalado con configuraci√≥n SSL optimizada"
Write-Host "‚úÖ Certificados actualizados"
Write-Host "‚úÖ Variables de entorno configuradas"
Write-Host "‚úÖ Script de configuraci√≥n permanente creado"
Write-Host ""
Write-Host "üöÄ PR√ìXIMOS PASOS:"
Write-Host "1. La aplicaci√≥n ahora deber√≠a funcionar sin errores SSL"
Write-Host "2. Los modelos se descargar√°n autom√°ticamente en el primer uso"
Write-Host "3. Si persisten problemas, verifica tu conexi√≥n a internet"
Write-Host ""
Write-Host "üí° CONSEJOS:"
Write-Host "- Usa el modelo 'tts_models/multilingual/multi-dataset/xtts_v2' para espa√±ol"
Write-Host "- La primera descarga puede tomar varios minutos"
Write-Host "- Los modelos se guardan en cache para usos futuros"
Write-Host ""

# Pausa para que el usuario lea la informaci√≥n
Write-Host "Presiona cualquier tecla para continuar..." -ForegroundColor Yellow
$null = $Host.UI.RawUI.ReadKey("NoEcho,IncludeKeyDown")